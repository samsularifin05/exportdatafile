{"version":3,"sources":["../src/interface.ts","../src/helpers.ts","../src/exportExcel.ts","../src/exportPdf.ts","../src/exportTextFile.tsx","../src/index.ts"],"sourcesContent":["import jsPDF from \"jspdf\";\nimport ExcelJS from \"exceljs\";\n\ntype FormatType = \"RP\" | \"GR\" | \"DATETIME\" | \"NUMBER\" | \"IMAGE\" | \"\";\ntype HalignType = \"center\" | \"right\" | \"left\" | \"\";\ntype ValignType = \"top\" | \"middle\" | \"bottom\" | undefined;\n\nexport interface ColumnGenarator<T> {\n  key: keyof T;\n  label?: string;\n  options?: {\n    format?: FormatType;\n    halign?: HalignType;\n    valign?: ValignType;\n    disabledColumn?: boolean;\n    disabledFooter?: boolean;\n  };\n  child?: ColumnGenarator<T>[];\n}\n\nexport interface DataItemGenerator {\n  [key: string]: any;\n}\n\nexport type FileType = \"EXCEL\" | \"PDF\" | \"TXT\" | \"ALL\";\n\nexport const validFileTypes: FileType[] = [\"EXCEL\", \"PDF\", \"TXT\", \"ALL\"];\ntype CustomizePdfFunction = (\n  doc: jsPDF,\n  finalY: number,\n  autoTable?: any\n) => void;\ntype addRowPdfPdfFunction = (tableRows?: any) => void;\ntype CustomizeFunctionExcel = (worksheet: ExcelJS.Worksheet, lastIndex: number) => void;\n\nexport interface GenaratorExport<T> {\n  columns: ColumnGenarator<T>[];\n  data: DataItemGenerator[];\n  type: (\"EXCEL\" | \"PDF\" | \"TXT\" | \"ALL\")[];\n  title?: string;\n\n  pdfSetting?: {\n    orientation?: \"p\" | \"portrait\" | \"l\" | \"landscape\";\n    unit?: \"pt\" | \"px\" | \"in\" | \"mm\" | \"cm\" | \"ex\" | \"em\" | \"pc\";\n    width?: number;\n    height?: number;\n    fontSIze?: number;\n    bgColor?: string;\n    titlePdf?: string;\n    txtColor?: string;\n    startY?: number;\n    textHeaderRight?: string;\n    textHeaderLeft?: string;\n    theme?: \"grid\" | \"striped\" | \"plain\";\n    grandTotalSetting?: {\n      disableGrandTotal?: boolean;\n      colSpan?: number;\n    };\n    openNewTab?: boolean;\n    addRow?: addRowPdfPdfFunction;\n    customHeader?: CustomizePdfFunction;\n    customFooter?: CustomizePdfFunction;\n    disablePrintDate?: boolean;\n  };\n  date?: {\n    start_date?: string;\n    end_date?: string;\n    caption?: string;\n  };\n  txtSetting?: {\n    dataTxt?: DataItemGenerator[] | DataItemGenerator;\n    titleTxt: string;\n    templateTxt?: string;\n    copy?: boolean;\n  };\n  excelSetting?: {\n    titleExcel?: string;\n    bgColor?: string;\n    txtColor?: string;\n    startY?: number;\n    additionalTextHeader?: string;\n    grandTotalSetting?: {\n      disableGrandTotal?: boolean;\n      colSpan?: number;\n    };\n    customHeader?: CustomizeFunctionExcel;\n    customFooter?: CustomizeFunctionExcel;\n  };\n  grouping: string[];\n  footerSetting?: {\n    subTotal?: {\n      caption?: string;\n      enableCount?: boolean;\n      captionItem?: string;\n      disableSubtotal?: boolean;\n    };\n    grandTotal?: {\n      caption?: string;\n      captionItem?: string;\n      enableCount?: boolean;\n      disableGrandTotal?: boolean;\n    };\n  };\n}\n","import ExcelJS from 'exceljs';\nimport { ColumnGenarator, FileType, validFileTypes } from \"./interface\";\n\nexport function convertDateTime(tgl: string) {\n  const now = new Date(tgl);\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, \"0\");\n  const day = String(now.getDate()).padStart(2, \"0\");\n  const hours = String(now.getHours()).padStart(2, \"0\");\n  const minutes = String(now.getMinutes()).padStart(2, \"0\");\n  const seconds = String(now.getSeconds()).padStart(2, \"0\");\n  const currentDateTime = `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;\n  return currentDateTime;\n}\n\nexport function validateFileTypes(fileTypes: FileType[]): boolean {\n  return fileTypes.every((fileType) => validFileTypes.includes(fileType));\n}\n\nexport function countColumns(columns: ColumnGenarator<any>[]): number {\n  let count = 0;\n  columns.forEach((col) => {\n    if (col.child && col.child.length > 0) {\n      count += countColumns(col.child);\n    } else {\n      count += 1;\n    }\n  });\n  return count;\n}\n\nexport const getFlattenColumns = (\n  columns: ColumnGenarator<any>[]\n): ColumnGenarator<any>[] => {\n  const flat: ColumnGenarator<any>[] = [];\n\n  columns.forEach((col) => {\n    if (col.child && col.child.length > 0) {\n      flat.push(...getFlattenColumns(col.child)); // panggil rekursif\n    } else {\n      flat.push(col);\n    }\n  });\n\n  return flat;\n};\n\nexport const formatingTitle = (title: string): string => {\n  // Pisahkan kata-kata menggunakan underscore sebagai pemisah\n  const words = title.split(\"_\");\n\n  // Ubah setiap kata menjadi huruf kapital dan gabungkan kembali dengan spasi di antara mereka\n  const formattedtitle = words\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n\n  return formattedtitle;\n};\n\n\n/**\n * Menambahkan gambar ke baris Excel menggunakan ExcelJS di browser, dari base64 string\n */\nexport async function addImagesToRow(\n  workbook: ExcelJS.Workbook,\n  worksheet: ExcelJS.Worksheet,\n  row: ExcelJS.Row,\n  rowData: any[]\n) {\n  for (let index = 0; index < rowData.length; index++) {\n    const cellData = rowData[index];\n\n    // Proses jika imageSrc adalah base64 string\n    if (\n      cellData?.isImage &&\n      cellData?.imageSrc &&\n      typeof cellData.imageSrc === \"string\" &&\n      cellData.imageSrc.startsWith(\"data:image\")\n    ) {\n      try {\n        const { buffer, extension } = base64ToBufferAndExtension(cellData.imageSrc);\n\n        const imageId = workbook.addImage({\n          buffer: buffer as any,\n          extension,\n        });\n\n        worksheet.addImage(imageId, {\n          tl: { col: index, row: row.number - 1 },\n          ext: { width: 70, height: 60 },\n          editAs: \"oneCell\",\n        });\n\n        if (!row.height || row.height < 60) {\n          row.height = 35;\n        }\n      } catch (error) {\n        console.error(\"❌ Error adding image to row:\", error);\n        row.getCell(index + 1).value = \"[Image]\";\n      }\n    }\n  }\n}\n\n/**\n * Mengubah base64 image string ke buffer dan extension\n */\nfunction base64ToBufferAndExtension(base64: string): { buffer: Uint8Array; extension: any } {\n  const match = base64.match(/^data:image\\/(\\w+);base64,(.*)$/);\n  if (!match) throw new Error(\"Invalid base64 image format\");\n  const extension = match[1] === \"jpg\" ? \"jpeg\" : (match[1] as any);\n  const base64Data = match[2];\n  const binaryString = atob(base64Data);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return { buffer: bytes, extension };\n}","// import BwipJs from \"bwip-js/browser\";\nimport {\n  addImagesToRow,\n  convertDateTime,\n  countColumns,\n  formatingTitle,\n  getFlattenColumns\n} from \"./helpers\";\nimport { DataItemGenerator, GenaratorExport } from \"./interface\";\nimport ExcelJS from \"exceljs\";\nconst ExportExcel = async <T>({\n  columns,\n  data,\n  grouping,\n  date,\n  excelSetting,\n  title,\n  footerSetting,\n}: GenaratorExport<T>): Promise<void> => {\n  const workbook = new ExcelJS.Workbook();\n  columns = columns.filter((item) => !item.options?.disabledColumn);\n  const worksheet = workbook.addWorksheet(title || excelSetting?.titleExcel);\n\n  const lastUsedColumnIndex = countColumns(columns);\n\n  // Judul\n  // console.log(lastUsedColumnIndex);\n  const judul = worksheet.addRow([]);\n  judul.getCell(1).value = title || excelSetting?.titleExcel;\n  judul.getCell(1).alignment = { horizontal: \"center\" };\n\n  const lastColumnLetter = worksheet.getColumn(lastUsedColumnIndex).letter;\n\n  worksheet.mergeCells(`A${judul.number}:${lastColumnLetter}${judul.number}`);\n\n  judul.eachCell((cell) => {\n    cell.font = {\n      color: { argb: \"000000\" },\n      bold: true,\n      size: 12,\n    };\n  });\n\n  // Tanggal\n  if (date) {\n    const tanggalRow = worksheet.addRow([]);\n    tanggalRow.getCell(1).value =\n      `${date.caption ? date.caption : \"Tanggal \"} : ${date?.start_date} ${date?.end_date ? `s/d ${date?.end_date}` : \"\"\n      }`;\n    tanggalRow.getCell(1).alignment = { horizontal: \"center\" };\n    worksheet.mergeCells(\n      `A${tanggalRow.number}:${lastColumnLetter}${tanggalRow.number}`\n    );\n\n    tanggalRow.eachCell((cell) => {\n      cell.font = {\n        color: { argb: \"00000\" },\n        bold: true,\n        size: 12,\n      };\n    });\n  }\n\n  // additional\n  const additionalText = worksheet.addRow([]);\n  additionalText.getCell(1).value = excelSetting?.additionalTextHeader || \"\";\n  additionalText.getCell(1).alignment = { horizontal: \"center\" };\n  worksheet.mergeCells(\n    `A${additionalText.number}:${lastColumnLetter}${additionalText.number}`\n  );\n\n\n\n  additionalText.eachCell((cell) => {\n    cell.font = { color: { argb: \"000000\" }, bold: true, size: 12 };\n  });\n\n  if (excelSetting?.customHeader) {\n    excelSetting.customHeader(worksheet, lastUsedColumnIndex);\n  }\n\n  const startY = excelSetting?.startY && excelSetting.startY > 0 ? excelSetting.startY : 1;\n\n  // Tambahkan baris kosong sebelum header table\n  if (startY > 1) {\n    for (let i = 1; i < startY; i++) {\n      worksheet.addRow([]);\n    }\n  }\n\n  const hasChild = columns.some((col) => col.child && col.child.length > 0);\n  const headerColumn1 = worksheet.addRow([]);\n  const headerColumn2 = hasChild ? worksheet.addRow([]) : null;\n\n  columns.forEach((col) => {\n    if (col.child && col.child.length > 0) {\n      // Parent dengan child: di headerColumn1 ditulis parent-nya dan di headerColumn2 tulis child-nya\n      // Merge parent cell di headerColumn1 sesuai jumlah child\n      const startCol = headerColumn1.actualCellCount + 1\n\n      const childCount = col.child.length;\n\n      // Isi parent di headerColumn1, merge sesuai childCount\n      headerColumn1.getCell(startCol).value = col.label;\n      if (childCount > 1) {\n        worksheet.mergeCells(\n          headerColumn1.number,\n          startCol,\n          headerColumn1.number,\n          startCol + childCount - 1\n        );\n      }\n\n      // Styling dan alignment parent headerColumn1\n      for (let i = startCol; i < startCol + childCount; i++) {\n        const cell = headerColumn1.getCell(i);\n        cell.fill = {\n          type: \"pattern\",\n          pattern: \"solid\",\n          fgColor: { argb: excelSetting?.bgColor || \"E8E5E5\" },\n        };\n        cell.font = {\n          color: { argb: excelSetting?.txtColor || \"000000\" },\n          bold: true,\n        };\n        cell.alignment = { horizontal: \"center\", vertical: \"middle\" };\n      }\n\n      // Isi child di headerColumn2\n      col.child.forEach((childCol, index) => {\n        if (headerColumn2) {\n          const cell = headerColumn2.getCell(startCol + index);\n          cell.value = childCol.label;\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: excelSetting?.bgColor || \"E8E5E5\" },\n          };\n          cell.font = {\n            color: { argb: excelSetting?.txtColor || \"000000\" },\n            bold: true,\n          };\n\n          const halign =\n            childCol.options?.halign ||\n            ([\"RP\", \"GR\", \"NUMBER\"].includes(childCol?.options?.format || \"\")\n              ? \"right\"\n              : \"left\");\n          const valign = childCol.options?.valign || \"middle\";\n          cell.alignment = { horizontal: halign, vertical: valign };\n        }\n      });\n    } else {\n      // Parent tanpa child: tulis di headerColumn1 dan merge di headerColumn2 agar melebar ke bawah\n      const colIndex = headerColumn1.actualCellCount + 1;\n\n      // Isi headerColumn1\n      headerColumn1.getCell(colIndex).value = col.label;\n      headerColumn1.getCell(colIndex).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: excelSetting?.bgColor || \"E8E5E5\" },\n      };\n      headerColumn1.getCell(colIndex).font = {\n        color: { argb: excelSetting?.txtColor || \"000000\" },\n        bold: true,\n      };\n      headerColumn1.getCell(colIndex).alignment = {\n        horizontal: col.options?.halign || \"center\",\n        vertical: col.options?.valign || \"middle\",\n      };\n      if (hasChild && headerColumn2) {\n        worksheet.mergeCells(\n          headerColumn1.number,\n          colIndex,\n          headerColumn2.number,\n          colIndex\n        );\n      }\n    }\n  });\n\n  const totals: { [key: string]: number } = {};\n\n  data.forEach(async (item) => {\n    if (item.detail?.length > 0) {\n\n      if (grouping.length > 0) {\n\n        const totalColumns = countColumns(columns); // sudah kamu punya\n        const groupContent = grouping\n          .map((column) =>\n            item[column] !== undefined || item[column] !== null\n              ? `${formatingTitle(column)} : ${item[column]}`\n              : \"\"\n          )\n          .filter(Boolean)\n          .join(\"  |  \");\n\n        const groupRow = worksheet.addRow([groupContent]); // hanya isi satu sel (di kolom A)\n        worksheet.mergeCells(\n          `A${groupRow.number}:${String.fromCharCode(64 + totalColumns)}${groupRow.number}`\n        );\n        // Styling opsional:\n        groupRow.getCell(1).alignment = { horizontal: \"left\" };\n        groupRow.getCell(1).font = { bold: true };\n      }\n\n\n      const subtotal: { [key: string]: number } = {};\n\n      item.detail.forEach(async (itemDetail: any) => {\n        const flatColumns = getFlattenColumns(columns);\n\n        const rowData = flatColumns.map((column) => {\n          if (\n            column?.options?.format === \"IMAGE\" &&\n            itemDetail[column.key as keyof DataItemGenerator]\n          ) {\n            return {\n              value: \"\", // Kosongkan value untuk cell gambar\n              alignment: { horizontal: \"center\", vertical: \"middle\" },\n              isImage: true,\n              imageSrc: itemDetail[column.key as keyof DataItemGenerator], // base64 sudah didukung oleh fetchImageAsBuffer\n            };\n          }\n          const value =\n            column?.options?.format === \"DATETIME\"\n              ? convertDateTime(\n                itemDetail[column.key as keyof DataItemGenerator]\n              )\n              : itemDetail[column.key as keyof DataItemGenerator];\n          const alignment = {\n            horizontal: column?.options?.halign\n              ? column?.options?.halign\n              : column?.options?.format === \"RP\" ||\n                column?.options?.format === \"GR\" ||\n                column?.options?.format === \"NUMBER\"\n                ? \"right\"\n                : \"left\",\n          };\n          const columnKey = column.key as keyof DataItemGenerator;\n          totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n          subtotal[columnKey] = (subtotal[columnKey] || 0) + Number(value);\n\n          return {\n            value,\n            alignment,\n            numFmt:\n              column?.options?.format === \"RP\"\n                ? \"#,##0\"\n                : column?.options?.format === \"GR\"\n                  ? \"#,##0.000\"\n                  : undefined,\n          };\n        });\n\n        const row = worksheet.addRow(rowData.map((cellData) => cellData.value));\n\n        rowData.forEach((cellData, index) => {\n          const cell = row.getCell(index + 1);\n          // Only assign allowed values for horizontal and vertical alignment\n          const allowedHorizontal: Array<\"center\" | \"right\" | \"left\" | \"fill\" | \"justify\" | \"centerContinuous\" | \"distributed\"> = [\n            \"center\", \"right\", \"left\", \"fill\", \"justify\", \"centerContinuous\", \"distributed\"\n          ];\n          const allowedVertical: Array<\"top\" | \"middle\" | \"bottom\" | \"distributed\" | \"justify\"> = [\n            \"top\", \"middle\", \"bottom\", \"distributed\", \"justify\"\n          ];\n\n          let horizontal: typeof allowedHorizontal[number] | undefined = undefined;\n          let vertical: typeof allowedVertical[number] | undefined = undefined;\n\n          if (cellData.alignment && typeof cellData.alignment.horizontal === \"string\" && allowedHorizontal.includes(cellData.alignment.horizontal as any)) {\n            horizontal = cellData.alignment.horizontal as typeof allowedHorizontal[number];\n          }\n          if (\n            cellData.alignment &&\n            \"vertical\" in cellData.alignment &&\n            typeof (cellData.alignment as any).vertical === \"string\" &&\n            allowedVertical.includes((cellData.alignment as any).vertical)\n          ) {\n            vertical = (cellData.alignment as any).vertical as typeof allowedVertical[number];\n          }\n\n          cell.alignment = {\n            ...(horizontal ? { horizontal } : {}),\n            ...(vertical ? { vertical } : {}),\n          };\n\n          // Set numFmt only for number cells\n          if (\n            cellData.numFmt &&\n            typeof cellData.value === \"number\" &&\n            !isNaN(cellData.value)\n          ) {\n            // Ensure the cell value is a number before setting numFmt\n            cell.value = Number(cellData.value);\n            cell.numFmt = cellData.numFmt;\n          }\n        });\n\n        // Add images after all cell formatting is complete\n        await addImagesToRow(workbook, worksheet, row, rowData);\n      });\n      const flatColumnsSubTott = getFlattenColumns(columns);\n\n      if (!footerSetting?.subTotal?.disableSubtotal) {\n        const subtotalRow = worksheet.addRow(columns.map(() => null)); // Create a row with null values\n\n        flatColumnsSubTott.forEach((column, columnIndex) => {\n          if (\n            column?.options?.format === \"RP\" ||\n            column?.options?.format === \"GR\" ||\n            column?.options?.format === \"NUMBER\"\n          ) {\n            const startRow = 4; // Adjust this based on the starting row for your data\n            const endRow = data.length + startRow - 1;\n            const totalFormula = `SUM(${String.fromCharCode(\n              65 + columnIndex\n            )}${startRow}:${String.fromCharCode(65 + columnIndex)}${endRow})`;\n            const grandTotalCell = subtotalRow.getCell(columnIndex + 1);\n            const subtotalCount = footerSetting?.subTotal?.enableCount\n              ? grouping.length > 0\n                ? \" : \" + item.detail.length\n                : \"\"\n              : \"\";\n\n            const captionSub = footerSetting?.subTotal?.captionItem\n              ? footerSetting?.subTotal?.captionItem\n              : \"\";\n            (subtotalRow.getCell(1).value =\n              `${footerSetting?.subTotal?.caption || \"SUB TOTAL\"} ${subtotalCount} ${captionSub}`),\n              (subtotalRow.getCell(1).alignment = { horizontal: \"center\" });\n\n            // Explicitly cast the cell to CellValue to set numFmt\n            (grandTotalCell as any).numFmt =\n              column?.options?.format === \"GR\" ? \"#,##0.000\" : \"#,##0\";\n            grandTotalCell.value = { formula: totalFormula };\n            subtotalRow.getCell(columnIndex + 1).value = column?.options\n              .disabledFooter\n              ? \"\"\n              : subtotal[column.key as keyof DataItemGenerator];\n          } else {\n            subtotalRow.getCell(columnIndex + 1).value = \"\";\n          }\n        });\n\n\n        if (excelSetting?.grandTotalSetting?.colSpan) {\n          worksheet.mergeCells(\n            `A${subtotalRow.number}:${String.fromCharCode(\n              64 + Number(excelSetting?.grandTotalSetting?.colSpan)\n            )}${subtotalRow.number}`\n          );\n        }\n        subtotalRow.eachCell((cell) => {\n          cell.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }, // Warna hijau yang diinginkan\n            bgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" },\n          };\n          cell.font = {\n            color: { argb: excelSetting?.txtColor },\n            bold: true,\n          };\n        });\n      }\n\n    } else {\n      const flatColumns = getFlattenColumns(columns);\n\n      const rowData = flatColumns.map((column) => {\n        if (\n          column?.options?.format === \"IMAGE\" &&\n          item[column.key as keyof DataItemGenerator]\n        ) {\n          return {\n            value: \"\", // Kosongkan value untuk cell gambar\n            alignment: { horizontal: \"center\", vertical: \"middle\" },\n            isImage: true,\n            imageSrc: item[column.key as keyof DataItemGenerator], // base64 sudah didukung oleh fetchImageAsBuffer\n          };\n        }\n        const value =\n          column?.options?.format === \"DATETIME\"\n            ? convertDateTime(\n              item[column.key as keyof DataItemGenerator]\n            )\n            : item[column.key as keyof DataItemGenerator];\n        const alignment = {\n          horizontal: column?.options?.halign\n            ? column?.options?.halign\n            : column?.options?.format === \"RP\" ||\n              column?.options?.format === \"GR\" ||\n              column?.options?.format === \"NUMBER\"\n              ? \"right\"\n              : \"left\",\n        };\n        const columnKey = column.key as keyof DataItemGenerator;\n        totals[columnKey] = (totals[columnKey] || 0) + Number(value);\n\n        return {\n          value,\n          alignment,\n          numFmt:\n            column?.options?.format === \"RP\"\n              ? \"#,##0\"\n              : column?.options?.format === \"GR\"\n                ? \"#,##0.000\"\n                : undefined,\n        };\n      });\n\n      // BUG: rowData.map(async (cellData) => cellData.value) menghasilkan array Promise, bukan array value!\n      // Seharusnya: rowData.map(cellData => cellData.value)\n      const row = worksheet.addRow(rowData.map(cellData => cellData.value));\n\n      rowData.forEach((cellData, index) => {\n        const cell = row.getCell(index + 1);\n        // Only assign allowed values for horizontal and vertical alignment\n        const allowedHorizontal: Array<\"center\" | \"right\" | \"left\" | \"fill\" | \"justify\" | \"centerContinuous\" | \"distributed\"> = [\n          \"center\", \"right\", \"left\", \"fill\", \"justify\", \"centerContinuous\", \"distributed\"\n        ];\n        const allowedVertical: Array<\"top\" | \"middle\" | \"bottom\" | \"distributed\" | \"justify\"> = [\n          \"top\", \"middle\", \"bottom\", \"distributed\", \"justify\"\n        ];\n\n        let horizontal: typeof allowedHorizontal[number] | undefined = undefined;\n        let vertical: typeof allowedVertical[number] | undefined = undefined;\n\n        if (cellData.alignment && typeof cellData.alignment.horizontal === \"string\" && allowedHorizontal.includes(cellData.alignment.horizontal as any)) {\n          horizontal = cellData.alignment.horizontal as typeof allowedHorizontal[number];\n        }\n        if (\n          cellData.alignment &&\n          \"vertical\" in cellData.alignment &&\n          typeof (cellData.alignment as any).vertical === \"string\" &&\n          allowedVertical.includes((cellData.alignment as any).vertical)\n        ) {\n          vertical = (cellData.alignment as any).vertical as typeof allowedVertical[number];\n        }\n\n        cell.alignment = {\n          ...(horizontal ? { horizontal } : {}),\n          ...(vertical ? { vertical } : {}),\n        };\n\n        if (\n          cellData.numFmt &&\n          typeof cellData.value === \"number\" &&\n          !isNaN(cellData.value)\n        ) {\n          // Ensure the cell value is a number before setting numFmt\n          cell.value = Number(cellData.value);\n          cell.numFmt = cellData.numFmt;\n        }\n      });\n\n      // Add images after all cell formatting is complete\n      await addImagesToRow(workbook, worksheet, row, rowData);\n\n    }\n  });\n\n  const grandTotalRow = worksheet.addRow(columns.map(() => null)); // Create a row with null values\n\n  const flatColumnsTott = getFlattenColumns(columns);\n\n  if (!footerSetting?.grandTotal?.disableGrandTotal) {\n\n    flatColumnsTott.forEach((column, columnIndex) => {\n      if (\n        column?.options?.format === \"RP\" ||\n        column?.options?.format === \"GR\" ||\n        column?.options?.format === \"NUMBER\"\n      ) {\n\n        const startRow = 4; // Adjust this based on the starting row for your data\n        const endRow = data.length + startRow - 1;\n        const totalFormula = `SUM(${String.fromCharCode(\n          65 + columnIndex\n        )}${startRow}:${String.fromCharCode(65 + columnIndex)}${endRow})`;\n        const grandTotalCell = grandTotalRow.getCell(columnIndex + 1);\n        // content: ,\n        const GrandTotal = footerSetting?.grandTotal?.enableCount\n          ? grouping.length > 0\n            ? \" : \" +\n            data.map((list) => list.detail.length).reduce((a, b) => a + b, 0)\n            : \" : \" + data.length\n          : \"\";\n\n        const caption = footerSetting?.grandTotal?.captionItem\n          ? footerSetting?.grandTotal?.captionItem\n          : \"\";\n\n        const footerGrandtotal = `${footerSetting?.grandTotal?.caption || \"GRAND TOTAL\"} ${GrandTotal} ${caption}`;\n        grandTotalRow.getCell(1).value = footerGrandtotal;\n        grandTotalRow.getCell(1).alignment = { horizontal: \"center\" };\n\n\n        (grandTotalCell as any).numFmt =\n          column?.options?.format === \"GR\" ? \"#,##0.000\" : \"#,##0\";\n        grandTotalCell.value = { formula: totalFormula };\n        grandTotalRow.getCell(columnIndex + 1).value = column?.options\n          .disabledFooter\n          ? \"\"\n          : totals[column.key as keyof DataItemGenerator];\n      } else {\n        grandTotalRow.getCell(columnIndex + 1).value = \"\";\n      }\n    });\n\n    if (excelSetting?.grandTotalSetting?.colSpan) {\n      worksheet.mergeCells(\n        `A${grandTotalRow.number}:${String.fromCharCode(\n          64 + Number(excelSetting?.grandTotalSetting?.colSpan)\n        )}${grandTotalRow.number}`\n      );\n    }\n    grandTotalRow.eachCell((cell) => {\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" }, // Warna hijau yang diinginkan\n        bgColor: { argb: excelSetting?.bgColor || \"#E8E5E5\" },\n      };\n      cell.font = {\n        color: { argb: excelSetting?.txtColor },\n        bold: true,\n      };\n    });\n  }\n\n\n  if (excelSetting?.customFooter) {\n    excelSetting.customFooter(worksheet, lastUsedColumnIndex);\n  }\n\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], {\n    type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  });\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = `${excelSetting?.titleExcel || title}.xlsx`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nexport default ExportExcel;\n","import {\n  ColumnGenarator,\n  DataItemGenerator,\n  GenaratorExport\n} from \"./interface\";\nimport {\n  convertDateTime,\n  countColumns,\n  formatingTitle,\n  getFlattenColumns\n} from \"./helpers\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n\n\nconst ExportPDF = <T>({\n  columns,\n  data,\n  grouping,\n  pdfSetting,\n  date,\n  title,\n  footerSetting,\n}: GenaratorExport<T>): void => {\n  const doc: jsPDF = new jsPDF(pdfSetting?.orientation, pdfSetting?.unit, [\n    pdfSetting?.width || 297,\n    pdfSetting?.height || 210,\n  ]);\n  let tableRows: any[] = [];\n  let finalY = date ? 30 : 20;\n  columns = columns.filter((item) => !item.options?.disabledColumn);\n\n  doc.setFontSize(10);\n  const widthPortrait = doc.internal.pageSize.getWidth();\n\n  const headerLeft = doc.splitTextToSize(pdfSetting?.textHeaderLeft || \"\", 110);\n  doc.text(headerLeft, 15, 18);\n\n  //Text Kanan\n  doc.text(`${title || pdfSetting?.titlePdf}`, widthPortrait - 15, 18, {\n    align: \"right\",\n  });\n\n  if (date) {\n    doc.text(\n      `${date.caption ? date.caption : \"TANGGAL \"} : ${date?.start_date} ${date?.end_date ? `s/d ${date?.end_date}` : \"\"\n      }`,\n      widthPortrait - 15,\n      22,\n      { align: \"right\" }\n    );\n  }\n\n  if (typeof pdfSetting?.customHeader === \"function\") {\n    pdfSetting.customHeader(doc, finalY, autoTable);\n  }\n  doc.setProperties({\n    title: title || pdfSetting?.titlePdf,\n  });\n\n  if (pdfSetting?.startY) {\n    // console.log(pdfSetting.finalY);\n    finalY = pdfSetting.startY;\n  }\n\n  // Header Tabel\n  const headerRow1: any[] = [];\n  const headerRow2: any[] = [];\n  const hasChild = columns.some((col) => col.child && col.child.length > 0);\n  columns.forEach((column) => {\n    const baseStyle = {\n      textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n      fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n      fontStyle: \"bold\",\n      ...(column?.options?.valign ? { valign: column.options.valign } : {}),\n      halign:\n        column?.options?.halign ??\n        ([\"RP\", \"GR\", \"NUMBER\"].includes(column?.options?.format || \"\")\n          ? \"right\"\n          : \"left\"),\n    };\n\n    if (hasChild) {\n      if (column.child && column.child.length > 0) {\n        // Parent di headerRow1\n        headerRow1.push({\n          content: column.label,\n          colSpan: column.child.length,\n          styles: baseStyle,\n        });\n\n        // Children di headerRow2\n        column.child.forEach((childCol) => {\n          headerRow2.push({\n            content: childCol.label,\n            key: childCol.key,\n            options: childCol.options,\n            styles: {\n              ...baseStyle,\n              halign:\n                childCol?.options?.halign ??\n                ([\"RP\", \"GR\", \"NUMBER\"].includes(\n                  childCol?.options?.format || \"\"\n                )\n                  ? \"right\"\n                  : \"left\"),\n            },\n          });\n        });\n      } else {\n        // Tidak ada child, tapi harus isi 2 baris header (rowSpan 2)\n        headerRow1.push({\n          content: column.label,\n          rowSpan: 2,\n          key: column.key,\n          options: column.options,\n          styles: baseStyle,\n        });\n      }\n    } else {\n      // Semua column tidak punya child, cukup 1 headerRow\n      headerRow1.push({\n        content: column.label,\n        key: column.key,\n        options: column.options,\n        styles: baseStyle,\n      });\n    }\n  });\n\n  // Push header ke tabel\n  tableRows.push(headerRow1);\n  if (hasChild && headerRow2.length > 0) {\n    tableRows.push(headerRow2);\n  }\n\n  // Body Tabel\n  const totals: { [key: string]: number } = {};\n\n  data.forEach((item) => {\n    if (item.detail?.length > 0) {\n      // Tambah row grup (header kelompok)\n\n      if (grouping.length > 0) {\n        const totalColumns = countColumns(columns);\n        const groupContent = grouping\n          .map((column) =>\n            item[column] !== undefined || item[column] !== null\n              ? `${formatingTitle(column)} : ${item[column]}`\n              : \"\"\n          )\n          .filter(Boolean)\n          .join(\"  |  \");\n        const groupRow = [\n          {\n            content: groupContent,\n            colSpan: totalColumns, // colSpan sesuai jumlah kolom tabel\n            styles: {\n              fontStyle: \"bold\",\n              halign: \"left\", // bisa disesuaikan\n            },\n          },\n        ];\n\n        tableRows.push(groupRow);\n      }\n\n      const subtotal: { [key: string]: number } = {};\n\n      // FLATTEN COLUMNS untuk looping\n      const flatColumns = getFlattenColumns(columns);\n\n      item.detail.forEach((list2: any) => {\n        const rowData = flatColumns.map((column) => {\n          const value = list2[column.key as keyof DataItemGenerator];\n          const columnKey = column.key as keyof DataItemGenerator;\n\n          // Hitung subtotal & total\n          totals[columnKey] = (totals[columnKey] || 0) + Number(value || 0);\n          subtotal[columnKey] = (subtotal[columnKey] || 0) + Number(value || 0);\n          const isImage = column.options?.format === \"IMAGE\";\n\n          return {\n            content: (() => {\n              switch (column?.options?.format) {\n                case \"RP\":\n                  return value !== undefined\n                    ? Number(value || 0).toLocaleString(\"kr-ko\")\n                    : \"\";\n                case \"GR\":\n                  return value !== undefined\n                    ? Number(value || 0).toFixed(3)\n                    : \"\";\n                case \"NUMBER\":\n                  return value !== undefined ? Number(value || 0) : \"\";\n                case \"IMAGE\":\n                  return \"\"\n                case \"DATETIME\":\n                  return value !== undefined\n                    ? convertDateTime(value || new Date())\n                    : \"\";\n                default:\n                  return value !== undefined ? value.toString() : \"\";\n              }\n            })(),\n            foto: isImage ? value : null,\n            styles: {\n              halign: column?.options?.halign\n                ? column?.options?.halign\n                : column?.options?.format === \"RP\" ||\n                  column?.options?.format === \"GR\" ||\n                  column?.options?.format === \"NUMBER\"\n                  ? \"right\"\n                  : typeof value === \"number\"\n                    ? \"right\"\n                    : \"left\",\n            },\n          };\n        });\n\n\n        tableRows.push(rowData);\n      });\n\n\n      if (!footerSetting?.subTotal?.disableSubtotal) {\n\n        // Footer Subtotal\n        const footersubtotal: any = [];\n        flatColumns.forEach((column) => {\n          const total = subtotal[column.key as keyof DataItemGenerator];\n          if (\n            column?.options?.format === \"RP\" ||\n            column?.options?.format === \"GR\" ||\n            column?.options?.format === \"NUMBER\"\n          ) {\n            footersubtotal.push({\n              content: column?.options?.disabledFooter\n                ? \"\"\n                : (() => {\n                  switch (column?.options?.format) {\n                    case \"RP\":\n                      return total.toLocaleString(\"kr-ko\");\n                    case \"GR\":\n                      return total.toFixed(3);\n                    case \"NUMBER\":\n                      return total;\n                    default:\n                      return total.toString();\n                  }\n                })(),\n              styles: {\n                halign: column?.options?.halign || \"right\",\n                textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n                fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n                fontStyle: \"bold\",\n              },\n            });\n          } else {\n            footersubtotal.push({\n              content: \"\",\n              styles: {\n                textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n                fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n                fontStyle: \"bold\",\n              },\n            });\n          }\n\n\n        });\n\n        const colSpan = pdfSetting?.grandTotalSetting?.colSpan\n          ? Number(pdfSetting?.grandTotalSetting?.colSpan || 0) + 1\n          : 0;\n\n        const subtotalCount = footerSetting?.subTotal?.enableCount\n          ? grouping.length > 0\n            ? \" : \" + item.detail.length\n            : \"\"\n          : \"\";\n\n        const captionSub = footerSetting?.subTotal?.captionItem\n          ? footerSetting?.subTotal?.captionItem\n          : \"\";\n\n        footersubtotal[0] = {\n          content: `${footerSetting?.subTotal?.caption || \"SUB TOTAL\"}${subtotalCount} ${captionSub}`,\n          colSpan,\n          styles: {\n            textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n            fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n            fontStyle: \"bold\",\n            halign: \"center\",\n          },\n        };\n\n        if (pdfSetting?.grandTotalSetting?.colSpan) {\n          footersubtotal.splice(1, pdfSetting?.grandTotalSetting?.colSpan);\n        }\n\n        tableRows.push(footersubtotal);\n      }\n    } else {\n      // Helper untuk mengambil data cell dari item dan column\n      const getCellData = (column: ColumnGenarator<any>, item: any) => {\n        const value = item[column.key as keyof DataItemGenerator];\n        const columnKey = column.key as keyof DataItemGenerator;\n\n        // Hitung total jika tidak disabled\n        if (!column.options?.disabledFooter) {\n          totals[columnKey] = (totals[columnKey] || 0) + Number(value || 0);\n        }\n\n        // Tentukan isi cell\n        const content = (() => {\n          switch (column?.options?.format) {\n            case \"RP\":\n              return value !== undefined\n                ? Number(value || 0).toLocaleString(\"kr-ko\")\n                : \"\";\n            case \"GR\":\n              return value !== undefined ? Number(value || 0).toFixed(3) : \"\";\n            case \"NUMBER\":\n              return value !== undefined ? Number(value || 0) : \"\";\n            case \"IMAGE\":\n              return '';\n            case \"DATETIME\":\n              return value !== undefined\n                ? convertDateTime(value || new Date())\n                : \"\";\n            default:\n              return value !== undefined ? value?.toString() : \"\";\n          }\n        })();\n\n        // Style cell\n        const halign = column?.options?.halign\n          ? column?.options?.halign\n          : column?.options?.format === \"RP\" ||\n            column?.options?.format === \"GR\" ||\n            column?.options?.format === \"NUMBER\"\n            ? \"right\"\n            : typeof value === \"number\"\n              ? \"right\"\n              : \"left\";\n\n        const isImage = column.options?.format === \"IMAGE\";\n\n\n        return {\n          options: column?.options,\n          content,\n          foto: isImage ? value : null,\n          styles: { halign },\n        };\n      };\n\n      // Helper rekursif untuk flatten column dengan child\n\n      // Dapatkan semua kolom flatten dari struktur kolom dengan child\n      const flatColumns = getFlattenColumns(columns);\n\n      // Lalu generate rowData\n      const rowData = flatColumns.map((column) => getCellData(column, item));\n\n      // Tambahkan ke baris tabel\n      tableRows.push(rowData);\n    }\n  });\n\n  const flatColumns = getFlattenColumns(columns);\n  if (!footerSetting?.grandTotal?.disableGrandTotal) {\n    const grandTotal: any[] = [];\n\n    flatColumns.forEach((column) => {\n      const total = totals[column.key as keyof DataItemGenerator];\n\n      const isNumericFormat = [\"RP\", \"GR\", \"NUMBER\"].includes(\n        column?.options?.format || \"\"\n      );\n\n      const content = column?.options?.disabledFooter\n        ? \"\"\n        : (() => {\n          if (!isNumericFormat) return \"\";\n          switch (column.options?.format) {\n            case \"RP\":\n              return Number(total || 0).toLocaleString(\"kr-KO\");\n            case \"GR\":\n              return Number(total || 0).toFixed(3);\n            case \"NUMBER\":\n              return Number(total || 0);\n            default:\n              return (total || 0).toString();\n          }\n        })();\n\n      grandTotal.push({\n        options: column?.options,\n        content,\n        styles: {\n          halign: column?.options?.halign\n            ? column.options.halign\n            : isNumericFormat\n              ? \"right\"\n              : \"left\",\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"bold\",\n        },\n      });\n    });\n    // Tangani caption dan colSpan untuk GRAND TOTAL\n    const rawColSpan = Number(pdfSetting?.grandTotalSetting?.colSpan || 0);\n    const colSpan = Math.min(rawColSpan + 1, flatColumns.length); // batasi agar tidak lebih dari kolom yang tersedia\n\n    const totalItemCount = footerSetting?.grandTotal?.enableCount\n      ? grouping.length > 0\n        ? data.reduce((sum, group) => sum + group.detail.length, 0)\n        : data.length\n      : 0;\n\n    const caption = footerSetting?.grandTotal?.captionItem || \"\";\n    const grandTotalLabel =\n      `${footerSetting?.grandTotal?.caption || \"GRAND TOTAL\"}` +\n      (totalItemCount ? ` : ${totalItemCount}` : \"\") +\n      (caption ? ` ${caption}` : \"\");\n\n    // Ubah cell pertama dengan content Grand Total + colSpan\n    grandTotal[0] = {\n      content: grandTotalLabel,\n      colSpan,\n      styles: {\n        textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n        fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n        fontStyle: \"bold\",\n        halign: \"center\",\n      },\n    };\n\n    // Hapus kolom setelah grandTotal[0] sebanyak colSpan - 1 agar panjang array tetap flatColumns.length\n    grandTotal.splice(1, colSpan - 1);\n\n    // Pastikan panjang array tetap sama dengan flatColumns.length\n    while (grandTotal.length < flatColumns.length) {\n      grandTotal.push({\n        content: \"\",\n        styles: {\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"bold\",\n        },\n      });\n    }\n\n    // Push baris GRAND TOTAL ke table\n    tableRows.push(grandTotal);\n  }\n\n  if (typeof pdfSetting?.addRow === \"function\") {\n    pdfSetting?.addRow(tableRows);\n  }\n\n  if (!pdfSetting?.disablePrintDate) {\n    const totalColumns = countColumns(columns);\n\n    tableRows.push([\n      {\n        content: `Print Date : ${convertDateTime(`${new Date()}`)}`,\n        colSpan: totalColumns,\n        styles: {\n          textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n          fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n          fontStyle: \"italic\",\n        },\n      },\n    ]);\n  }\n\n  autoTable(doc, {\n    head: [],\n    body: tableRows,\n    startY: finalY,\n    theme: pdfSetting?.theme || \"plain\",\n    rowPageBreak: \"avoid\",\n    margin: { top: 10 },\n    bodyStyles: { fontSize: pdfSetting?.fontSIze || 8 },\n    headStyles: {\n      fontSize: pdfSetting?.fontSIze || 8,\n      textColor: `#${pdfSetting?.txtColor || \"000\"}`,\n      fillColor: `#${pdfSetting?.bgColor || \"E8E5E5\"}`,\n    },\n    tableLineColor: [255, 255, 255],\n    didParseCell: function (data) {\n      const colIndex = data.column.index;\n      const col = flatColumns[colIndex];\n      const isImage = col?.options?.format === \"IMAGE\";\n\n      if (isImage && data.cell.raw && (data.cell.raw as any).foto) {\n        data.row.height = 20; // Ganti sesuai ukuran gambar\n        data.cell.styles.valign = \"middle\"; // Ubah ke \"middle\" agar foto di tengah\n        data.cell.styles.halign = \"center\"; // Tambahkan agar foto di tengah secara horizontal\n      }\n    },\n\n    // ✅ Render gambar sesuai posisi dan ukuran\n    didDrawCell: function (data) {\n      const { cell } = data;\n      const raw = cell.raw || {};\n      const value = (raw as any).foto;\n      const colIndex = data.column.index;\n      const col = flatColumns[colIndex];\n\n      if (col?.options?.format === \"IMAGE\" && value) {\n        const imageSize = 15;\n        const x = cell.x + (cell.width - imageSize) / 2;\n        const y = cell.y + (cell.height - imageSize) / 2;\n\n        try {\n          doc.addImage(value, \"JPG\", x, y, imageSize, imageSize);\n        } catch (err) {\n          console.warn(\"❌ Gagal render gambar:\", err);\n        }\n      }\n    }\n\n  });\n  tableRows = [];\n  finalY = (doc as any).lastAutoTable.finalY;\n  +3;\n\n  const pages = (doc as any).internal.getNumberOfPages();\n  const pageWidth = doc.internal.pageSize.width;\n  const pageHeight = doc.internal.pageSize.height;\n\n  doc.setFontSize(10);\n\n  for (let j = 1; j < pages + 1; j++) {\n    const horizontalPos = pageWidth / 2;\n    const verticalPos = pageHeight - 10;\n    doc.setPage(j);\n    doc.text(`${j} of ${pages}`, horizontalPos, verticalPos, {\n      align: \"center\",\n    });\n  }\n  if (typeof pdfSetting?.customFooter === \"function\") {\n    pdfSetting.customFooter(doc, finalY, autoTable);\n  }\n\n  if (pdfSetting?.openNewTab) {\n    const blob = doc.output(\"bloburl\");\n    window.open(blob);\n  } else {\n    doc.save(`${pdfSetting?.titlePdf || title}.pdf`);\n  }\n};\n\n\nexport default ExportPDF;\n","interface Load {\n  [key: string]: string | string[] | undefined;\n}\n\ninterface Res {\n  data: Load[];\n  template: string;\n  copy?: boolean;\n}\n\nconst generateNotaSlip = (res: Res): string[] => {\n  const notaGenerated: string[] = [];\n  const jml = res.copy ? 2 : 1;\n  for (let index = 0; index < jml; index++) {\n    const nota: string[] = res.data.map((load: Load) => {\n      let replaceLoop = res.template;\n\n      while (/\\n!!LOOP\\((.+)\\)(\\{\\n(.*\\n)+\\})\\n/gm.exec(replaceLoop)) {\n        replaceLoop = replaceLoop.replace(\n          /\\n!!LOOP\\((.+)\\)(\\{\\n(.*\\n)+\\})\\n/,\n          (_match, p1, p2) => {\n            const loopContent = p2.replace(/^\\{/, \"\").replace(/\\}$/, \"\");\n            const loopArray: string[] | undefined = !Array.isArray(load[p1])\n              ? [load[p1] as string]\n              : (load[p1] as string[]);\n            const detail: string = loopArray.reduce((acc, val) => {\n              return (\n                acc +\n                loopContent.replace(/\\{([a-z0-9_]+)\\}/gm, (c: any) => {\n                  const key = c.replace(/(\\{|\\})/g, \"\");\n                  if (key.match(/nama_barang/)) {\n                    const keyCustomer = key.match(/nama_barang/);\n                    const sliceNamaBarang =\n                      key === \"nama_barang2\"\n                        ? [20, 40]\n                        : key === \"nama_barang3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyCustomer] as string)\n                        ?.slice(...sliceNamaBarang)\n                        .trim() || \"\"\n                    );\n                  }\n                  if (key.match(/deskripsi_jual/)) {\n                    const keyDeskripsi = key.match(/deskripsi_jual/);\n                    const sliceDeskripsi =\n                      key === \"deskripsi_jual2\"\n                        ? [20, 40]\n                        : key === \"deskripsi_jual3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyDeskripsi] as string)\n                        ?.slice(...sliceDeskripsi)\n                        .trim() || \"\"\n                    );\n                  }\n                  if (key.match(/deskripsi/)) {\n                    const keyCustomer = key.match(/deskripsi/);\n                    const sliceNama =\n                      key === \"deskripsi2\"\n                        ? [20, 40]\n                        : key === \"deskripsi3\"\n                        ? [40, 60]\n                        : [0, 20];\n                    return (\n                      (val[keyCustomer] as string)\n                        ?.slice(...sliceNama)\n                        .trim() || \"\"\n                    );\n                  }\n                  return (val[key] as string) || \"\";\n                })\n              );\n            }, \"\");\n            return detail.replace(/\\n(\\s)+\\n/gm, \"\\n\");\n          }\n        );\n      }\n\n      return replaceLoop\n        .replace(/\\{([a-z0-9_]+)\\}/gm, (c) => {\n          const key = c.replace(/(\\{|\\})/g, \"\");\n\n          if (key.match(/auto_cut/)) {\n            return \"\\n\u001dVA\";\n          }\n          return (load[key] as string) || \"\";\n        })\n        .replace(/\\n(\\s)+\\n/gm, \"\\n\")\n        .replace(/~new_line~/gm, \"\\n\")\n        .replace(/!!LOOP\\(detail\\)/g, \"\")\n        .replace(/[}{]/g, \"\");\n    });\n\n    for (const key in nota) {\n      nota[key] += \"\\n\\n\";\n    }\n\n    notaGenerated.push(...nota);\n  }\n\n  return notaGenerated;\n};\n\nconst ExportToTxt = async (res: any, nama_file: string): Promise<void> => {\n  const notaGenerated = generateNotaSlip(res);\n  const blob = new Blob([notaGenerated?.join(\"\\n\") || \"\"], {\n    type: \"text/plain\"\n  });\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = URL.createObjectURL(blob);\n  downloadLink.download = nama_file;\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n};\n\nexport default ExportToTxt;\n","import ExportExcel from \"./exportExcel\";\nimport ExportPDF from \"./exportPdf\";\nimport ExportToTxt from \"./exportTextFile\";\nimport { validateFileTypes } from \"./helpers\";\nimport { GenaratorExport, ColumnGenarator } from \"./interface\";\n\n/**\n * Ekspor ke PDF atau Excel berdasarkan konfigurasi yang diberikan.\n *\n * @param title - Judul laporan.\n * @param columns - Konfigurasi kolom untuk laporan.\n * @param data - Data yang akan disertakan dalam laporan.\n * @param grouping - Gruping yang akan diterapkan dalam laporan ada head dan detail Example: [\"no_faktur_hutang\"].\n * @param pdfSetting - Opsi untuk config PDF.\n * @param excelSetting - Opsi untuk config Excel.\n * @param txtSetting - Opsi untuk config Txt file.\n * @param date - Rentang tanggal untuk laporan.\n * @param type - Jenis laporan yang akan diekspor (\"PDF\" \"TXT\" atau \"EXCEL\").\n * @param footerSetting - Setting Footer Subtotal atau GranTotal\n */\nexport const ExportData = <T>({\n  columns,\n  data,\n  grouping,\n  date,\n  type,\n  txtSetting,\n  pdfSetting,\n  excelSetting,\n  title,\n  footerSetting\n}: GenaratorExport<T>): void => {\n  const databaru = {\n    data: [txtSetting?.dataTxt],\n    template: txtSetting?.templateTxt,\n    copy: txtSetting?.copy\n  };\n\n  if (data.length === 0) {\n    throw new Error(\"Data is required\");\n  }\n  if (type.length === 0) {\n    throw new Error(\"Type is required\");\n  }\n\n  if (!validateFileTypes(type)) {\n    throw new Error(`Type Export must use [\"EXCEL\", \"PDF\", \"TXT\", \"ALL\"]`);\n  }\n\n  type.forEach((list) => {\n    if (list === \"PDF\") {\n      ExportPDF({\n        pdfSetting,\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        title,\n        footerSetting\n      });\n    } else if (list === \"TXT\") {\n      ExportToTxt(databaru, txtSetting?.titleTxt || \"\");\n    } else if (list === \"EXCEL\") {\n      ExportExcel({\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        excelSetting,\n        title,\n        footerSetting\n      });\n    } else {\n      ExportExcel({\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        excelSetting,\n        title\n      });\n\n      ExportPDF({\n        pdfSetting,\n        date,\n        data,\n        type,\n        columns,\n        grouping,\n        title\n      });\n\n      ExportToTxt(databaru, txtSetting?.titleTxt || \"\");\n    }\n  });\n};\n\nexport type { ColumnGenarator };\n"],"mappings":"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","names":["validFileTypes","convertDateTime","tgl","now","year","month","day","hours","minutes","seconds","validateFileTypes","fileTypes","fileType","validFileTypes","countColumns","columns","count","col","getFlattenColumns","flat","formatingTitle","title","word","addImagesToRow","workbook","worksheet","row","rowData","index","cellData","buffer","extension","base64ToBufferAndExtension","imageId","error","base64","match","base64Data","binaryString","len","bytes","i","ExcelJS","ExportExcel","columns","data","grouping","date","excelSetting","title","footerSetting","workbook","item","worksheet","lastUsedColumnIndex","countColumns","judul","lastColumnLetter","cell","tanggalRow","additionalText","startY","i","hasChild","col","headerColumn1","headerColumn2","startCol","childCount","childCol","index","halign","valign","colIndex","totals","totalColumns","groupContent","column","formatingTitle","groupRow","subtotal","itemDetail","rowData","getFlattenColumns","value","convertDateTime","alignment","columnKey","row","cellData","allowedHorizontal","allowedVertical","horizontal","vertical","addImagesToRow","flatColumnsSubTott","subtotalRow","columnIndex","endRow","totalFormula","grandTotalCell","subtotalCount","captionSub","grandTotalRow","flatColumnsTott","GrandTotal","list","a","b","caption","footerGrandtotal","buffer","blob","link","exportExcel_default","jsPDF","autoTable","ExportPDF","columns","data","grouping","pdfSetting","date","title","footerSetting","doc","tableRows","finalY","item","widthPortrait","headerLeft","headerRow1","headerRow2","hasChild","col","column","baseStyle","childCol","totals","totalColumns","countColumns","groupRow","formatingTitle","subtotal","flatColumns","getFlattenColumns","list2","rowData","value","columnKey","isImage","convertDateTime","footersubtotal","total","colSpan","subtotalCount","captionSub","getCellData","content","halign","grandTotal","isNumericFormat","rawColSpan","totalItemCount","sum","group","caption","grandTotalLabel","colIndex","cell","x","y","err","pages","pageWidth","pageHeight","j","horizontalPos","verticalPos","blob","exportPdf_default","generateNotaSlip","res","notaGenerated","jml","index","nota","load","replaceLoop","_match","p1","p2","loopContent","acc","val","c","key","keyCustomer","sliceNamaBarang","keyDeskripsi","sliceDeskripsi","sliceNama","ExportToTxt","nama_file","blob","downloadLink","exportTextFile_default","ExportData","columns","data","grouping","date","type","txtSetting","pdfSetting","excelSetting","title","footerSetting","databaru","validateFileTypes","list","exportPdf_default","exportTextFile_default","exportExcel_default"]}